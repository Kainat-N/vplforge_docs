"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[451],{7560:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"proj-architecture/design-decisions","title":"Design Decisions & Planned Features","description":"This section documents key architectural decisions, along with features we plan to support in the near future.","source":"@site/docs/proj-architecture/design-decisions.md","sourceDirName":"proj-architecture","slug":"/proj-architecture/design-decisions","permalink":"/vplforge_docs/docs/proj-architecture/design-decisions","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Design Decisions & Planned Features"},"sidebar":"tutorialSidebar","previous":{"title":"Architecture Overview","permalink":"/vplforge_docs/docs/proj-architecture/overview"},"next":{"title":"Contributing Guidelines","permalink":"/vplforge_docs/docs/category/contributing-guidelines"}}');var s=i(4848),r=i(8453);const t={sidebar_position:2,title:"Design Decisions & Planned Features"},a="Design Decisions & Planned Features",l={},c=[{value:"Design Decisions",id:"design-decisions",level:2},{value:"1. JSON-Driven Block System",id:"1-json-driven-block-system",level:3},{value:"2. Web + Electron Architecture",id:"2-web--electron-architecture",level:3},{value:"3. Modular Code Generation",id:"3-modular-code-generation",level:3},{value:"4. Clean Separation of Concerns",id:"4-clean-separation-of-concerns",level:3},{value:"Planned Features",id:"planned-features",level:2},{value:"1. Enhanced Block Types and Customization",id:"1-enhanced-block-types-and-customization",level:3},{value:"2. Interactive Debugging Tools",id:"2-interactive-debugging-tools",level:3},{value:"3. Version Control Integration",id:"3-version-control-integration",level:3},{value:"4. Support for Multiple Backend Languages",id:"4-support-for-multiple-backend-languages",level:3},{value:"5. Collaboration and Sharing Features",id:"5-collaboration-and-sharing-features",level:3},{value:"6. Mobile and Cloud Support",id:"6-mobile-and-cloud-support",level:3}];function d(e){const n={br:"br",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"design-decisions--planned-features",children:"Design Decisions & Planned Features"})}),"\n",(0,s.jsx)(n.p,{children:"This section documents key architectural decisions, along with features we plan to support in the near future."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"design-decisions",children:"Design Decisions"}),"\n",(0,s.jsx)(n.h3,{id:"1-json-driven-block-system",children:"1. JSON-Driven Block System"}),"\n",(0,s.jsx)(n.p,{children:"We adopted a JSON-based configuration format to define visual language components like blocks, categories, and connections."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Allows VPL designers to create and modify languages without touching the core framework logic or UI code."}),"\n",(0,s.jsx)(n.li,{children:"Promotes rapid prototyping as the designers only need to construct a JSON for making their own VPLs"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-web--electron-architecture",children:"2. Web + Electron Architecture"}),"\n",(0,s.jsx)(n.p,{children:"The framework is built using a combination of web technologies (React + Vite) and Electron. This hybrid architecture enables two modes of operation:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"an online mode for immediate web-based access and sharing"}),"\n",(0,s.jsx)(n.li,{children:"an offline mode for desktop use without requiring a web server."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This ensures cross-platform compatibility, ease of deployment, and consistent behavior across environments."}),"\n",(0,s.jsx)(n.h3,{id:"3-modular-code-generation",children:"3. Modular Code Generation"}),"\n",(0,s.jsx)(n.p,{children:"The code generation logic is kept independent of the visual editor and UI components."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"allows support for multiple backend languages without changing the core framework"}),"\n",(0,s.jsx)(n.li,{children:"enables flexible customization of how code is produced from block arrangements"}),"\n",(0,s.jsx)(n.li,{children:"paves the way for adding language-specific features or runtime execution"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-clean-separation-of-concerns",children:"4. Clean Separation of Concerns"}),"\n",(0,s.jsx)(n.p,{children:"The framework follows a modular architecture where components have clearly defined responsibilities."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"UI, logic, and backend systems are decoupled to prevent overlap and confusion"}),"\n",(0,s.jsx)(n.li,{children:"easier to test, debug, and scale different parts of the system independently"}),"\n",(0,s.jsx)(n.li,{children:"simplifies adding future extensions like debuggers, simulators, or plugins"}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"planned-features",children:"Planned Features"}),"\n",(0,s.jsx)(n.p,{children:"Here\u2019s a sneak peek at the awesome features we\u2019re cooking up to make VPLForge the most powerful VPL engine out there!"}),"\n",(0,s.jsx)(n.h3,{id:"1-enhanced-block-types-and-customization",children:"1. Enhanced Block Types and Customization"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Feature"}),": Introduction of new block types such as conditionals, functions, and custom user-defined blocks.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Reason"}),": To provide greater flexibility in how users can structure their VPLs, enabling them to create more complex and functional workflows."]}),"\n",(0,s.jsx)(n.h3,{id:"2-interactive-debugging-tools",children:"2. Interactive Debugging Tools"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Feature"}),": Integration of a real-time debugger that allows users to step through their VPL, inspect variable values, and highlight problematic connections or logic.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Reason"}),": Helps users troubleshoot their workflows and understand how their VPL is executing, improving the debugging experience."]}),"\n",(0,s.jsx)(n.h3,{id:"3-version-control-integration",children:"3. Version Control Integration"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Feature"}),": Implement version control for VPLs, allowing users to save different versions of their projects, compare changes, and revert to previous states.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Reason"}),": Version control is a critical feature for maintaining complex projects, especially in collaborative environments."]}),"\n",(0,s.jsx)(n.h3,{id:"4-support-for-multiple-backend-languages",children:"4. Support for Multiple Backend Languages"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Feature"}),": Enable the framework to generate code in multiple backend languages such as Python, Java, JavaScript, and C++.\r\n",(0,s.jsx)(n.strong,{children:"Reason"}),": Allowing users to tailor the generated code to their specific needs (e.g., exporting to Python, Java, or JavaScript) could improve usability and expand the user base."]}),"\n",(0,s.jsx)(n.h3,{id:"5-collaboration-and-sharing-features",children:"5. Collaboration and Sharing Features"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Feature"}),": Real-time collaboration support where multiple users can edit a VPL simultaneously or share VPLs with easy-to-use export/import options.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Reason"}),": Collaborative features can improve team-based development and make it easier for users to share their work."]}),"\n",(0,s.jsx)(n.h3,{id:"6-mobile-and-cloud-support",children:"6. Mobile and Cloud Support"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Feature"}),": Enable mobile access or cloud-based VPL development where users can design and test VPLs from anywhere.",(0,s.jsx)(n.br,{}),"\n",(0,s.jsx)(n.strong,{children:"Reason"}),": Increases accessibility and allows users to work on projects from multiple devices or collaborate without being tied to a single machine."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"We\u2019ll keep expanding the capabilities of VPLForge to make it the go-to platform for visual language design!"})})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var o=i(6540);const s={},r=o.createContext(s);function t(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);