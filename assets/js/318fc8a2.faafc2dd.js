"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8357],{3945:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"tutorial-extras/creating_your_own_vpl","title":"Create a New VPL","description":"In this section, you will learn how to create a new Visual Programming Language (VPL) using a JSON file. This file defines the blocks of your VPL, specifies how the blocks can connect with each other, and maps the visual elements to backend logic.","source":"@site/docs/tutorial-extras/creating_your_own_vpl.md","sourceDirName":"tutorial-extras","slug":"/tutorial-extras/creating_your_own_vpl","permalink":"/vplforge_docs/docs/tutorial-extras/creating_your_own_vpl","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"title":"Create a New VPL"},"sidebar":"tutorialSidebar","previous":{"title":"Getting Started","permalink":"/vplforge_docs/docs/tutorial-extras/setup"},"next":{"title":"Testing your VPL","permalink":"/vplforge_docs/docs/tutorial-extras/testing_vpl"}}');var s=t(4848),o=t(8453);const i={sidebar_position:2,title:"Create a New VPL"},l="Creating a New VPL Using JSON",c={},a=[{value:"Where to place the JSON",id:"where-to-place-the-json",level:2},{value:"What to include in the JSON file",id:"what-to-include-in-the-json-file",level:2},{value:"How to represent Components",id:"how-to-represent-components",level:2},{value:"Example JSON",id:"example-json",level:2}];function d(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"creating-a-new-vpl-using-json",children:"Creating a New VPL Using JSON"})}),"\n",(0,s.jsx)(n.p,{children:"In this section, you will learn how to create a new Visual Programming Language (VPL) using a JSON file. This file defines the blocks of your VPL, specifies how the blocks can connect with each other, and maps the visual elements to backend logic."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"where-to-place-the-json",children:"Where to place the JSON"}),"\n",(0,s.jsxs)(n.p,{children:["Place your JSON file in the ",(0,s.jsx)(n.code,{children:"samples"})," folder inside the project directory."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"cd unified-vpl-framework/public/samples\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"what-to-include-in-the-json-file",children:"What to include in the JSON file"}),"\n",(0,s.jsx)(n.p,{children:"To create your own VPL, make a JSON file following this structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n    "name": "xyz",\r\n    "type": "zyz",\r\n    "version": "0.0.0",\r\n    "components": [] \r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Here:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"name"'})," specifies the name of your language."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"type"'})," represents the category of blocks (e.g. flowchart, block, dataflow, etc.)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"version"'})," shows the current version of your language."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"components"'})," includes the properties of the blocks supported by your VPL"]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"how-to-represent-components",children:"How to represent Components"}),"\n",(0,s.jsx)(n.p,{children:"Each component of your VPL must follow this structure:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n    "id": "xyz",\r\n    "style": {},\r\n    "text": [],\r\n    "dimensions": [],\r\n    "inpins": [],\r\n    "outpins": [],\r\n    "props": ["xyz"],\r\n    "code": "$1"\r\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"In this:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"id"'})," gives the name of the component."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"style"'})," specifies the visual properties of the components like color and shape."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"text"'})," represents what would be written on the component on the screen."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"dimensions"'})," sets the dimensions of the component."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"inpins"'})," defines the input connection points for the component (position, label, and type)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"outpins"'})," defines the output connection points for the component (position, label, and type)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"props"'})," lists customizable properties of the block that can be entered by the user (e.g., inputs to functions)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"code"'})," specifies the backend logic that will be executed, where ",(0,s.jsx)(n.strong,{children:"$1"}),", ",(0,s.jsx)(n.strong,{children:"$2"}),", etc. are placeholders for user-defined properties."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"example-json",children:"Example JSON"}),"\n",(0,s.jsx)(n.p,{children:"Here is a sample JSON file for a dataflow based VPL."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\r\n    "name": "DataLang",\r\n    "type": "dataflow",\r\n    "version": "0.1.0",\r\n    "components": [\r\n        {\r\n            "id": "input",\r\n            "style": {\r\n                "type": "circle",\r\n                "left": 0,\r\n                "top": 0,\r\n                "radius": 25,\r\n                "fill": "blue"\r\n            },\r\n            "text": [\r\n                {\r\n                    "content": "Input",\r\n                    "fontSize": 14,\r\n                    "fill": "white",\r\n                    "textAlign": "center",\r\n                    "area": [[0,0],[50,50]],\r\n                    "prop": null\r\n                }\r\n            ],\r\n            "dimensions": [50,50],\r\n            "inpins": [],\r\n            "outpins": [[25,50,"bottom"]],\r\n            "props": ["prompt"],\r\n            "code": "$1 = input(#1)"\r\n        }\r\n    ]\r\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The above example demonstrates an ",(0,s.jsx)(n.strong,{children:"Input Block"})," for the dataflow-based VPL, with styling and text properties applied."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.em,{children:"With this foundation, you're now ready to design and implement your own VPLs using JSON!"})})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>l});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);